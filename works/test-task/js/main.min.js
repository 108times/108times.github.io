"use strict";function _createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return s=e.done,e},e:function(e){i=!0,o=e},f:function(){try{s||null==r.return||r.return()}finally{if(i)throw o}}}}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(r),!0).forEach((function(t){_defineProperty(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function _defineProperty(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}document.addEventListener("DOMContentLoaded",(function(){var e,t;e=function(e){var t=e.dataset.placeholder;if(void 0!==t){var r=document.createElement("label");r.for=e.name,r.textContent=t,r.classList.add("floating-placeholder"),e.parentElement.prepend(r),e.placeholderEl=r,""!==e.value&&(r.classList.add("focus"),e.classList.add("has-value")),e.addEventListener("focus",(function(e){r.classList.add("focus")})),e.addEventListener("blur",(function(t){void 0===e.value||""===e.value?(r.classList.remove("focus"),e.classList.remove("has-value")):e.classList.add("has-value")}))}},_toConsumableArray(document.querySelectorAll("[data-placeholder]")).forEach((function(t){return e(t)})),function(){var e=document.querySelector("[data-select-year]");e.classList.add("birthyear-select");var t=document.createElement("img");t.src="images/svg/expand-list.svg",t.alt="expand-birthyear-list",t.classList.add("birthyear-select__icon"),e.prepend(t);var r=e.querySelector("input");r.classList.add("birthyear-select__input"),r.readOnly="readonly";var n=document.createElement("ul");n.classList.add("birthyear-select__list");for(var a=e.dataset.yearStart||1970,o=function(e){var t=document.createElement("li");t.classList.add("birthyear-select__list-item"),t.textContent=e,t.onclick=function(t){r.value=e,r.classList.add("has-value"),r.placeholderEl.classList.add("focus")},n.appendChild(t)},s=e.dataset.yearEnd||2003;s>=a;s--)o(s);e.prepend(n);var i=function(e){e.preventDefault(),t.classList.add("birthyear-select__icon-rotated"),n.classList.add("shown")},c=function(e){t.classList.remove("birthyear-select__icon-rotated"),n.classList.remove("shown")};r.addEventListener("focus",(function(e){return i(e)})),t.addEventListener("focus",(function(e){return i(e)})),t.addEventListener("blur",(function(e){return c()})),r.addEventListener("blur",(function(e){return c()}))}(),t=function(e){var t=e.parentElement;e.hidden="hidden";var r,n=e.id||(r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:7;return Math.random().toString(36).substring(e)}(),e.setAttribute("id",r),r),a=document.createElement("span");a.classList.add("custom-checkbox"),a.setAttribute("tabIndex","0");var o=document.createElement("img");o.src="images/svg/checked.svg",o.alt="",o.classList.add("custom-checkbox__indicator"),a.checked=!1,a.appendChild(o);var s=document.createElement("label");s.setAttribute("for",n),s.className="custom-checkbox__label",s.textContent=e.dataset.label,!0===e.checked&&(a.classList.add("custom-checkbox--checked"),o.classList.add("custom-checkbox__indicator--visible")),a.addEventListener("click",(function(){var t=a.checked;t?(a.classList.remove("custom-checkbox--checked"),o.classList.remove("custom-checkbox__indicator--visible"),e.setAttribute("checked",!1)):(a.classList.add("custom-checkbox--checked"),o.classList.add("custom-checkbox__indicator--visible"),e.setAttribute("checked",!0)),a.checked=!t})),t.appendChild(a),t.appendChild(s)},_toConsumableArray(document.querySelectorAll("[data-custom-checkbox]")).forEach((function(e){return t(e)}));var r,n,a,o,s,i,c,l,u=function(e,t){return t/100*e};!function(){var e,t=new Map([[0,{dashes:7,markerHeight:0}],[24,{dashes:6,markerHeight:6}],[50,{dashes:5,markerHeight:9}],[75,{dashes:4,markerHeight:11}],[100,{dashes:3,markerHeight:14}]]),r=document.querySelector("[data-range]"),n=r.querySelector(".range__control"),a=r.querySelector(".range__control-container"),o=(document.querySelectorAll(".range__gradient"),document.querySelectorAll(".range__gradient-fill")),s=r.dataset.rangeStart,i=r.querySelector(".range__scale-top").offsetWidth;e=t,_toConsumableArray(r.querySelectorAll("[data-point]")).forEach((function(t){var r="",n="",a="",o=u(t.dataset.point,i);o===i?(console.log(o),t.classList.add("range__point--right"),document.body.offsetWidth<768&&setTimeout((function(){t.style.right="0",t.style.left=o+"px",t.querySelector(".range__point-text ").style.cssText="position: absolute; left: -152px; top:-20px;width:180px;"})),r="range__point-orientation--right",n="range__point-text--right",a="range__point-marker--right"):t.style.left=o+"px";var s=document.createElement("div");s.className="range__point-orientation "+r;var c=function(e,t){e=Number(e);var r=t.get(e);return r&&t.set(e,_objectSpread(_objectSpread({},r),{},{isUsed:!0})),r}(t.dataset.point,e),l=c.dashes,d=c.markerHeight,m=document.createElement("div");m.className="range__point-dashes",m.style.height=2*l+"px";for(var f=0;f<l;f++){var p=document.createElement("span");p.className="range__point-dash",m.appendChild(p)}s.appendChild(m);var v=document.createElement("div");v.className="range__point-marker "+a,v.style.height=d+"px",s.appendChild(v);var h=document.createElement("p");h.className="range__point-text "+n,h.textContent=t.dataset.text,t.appendChild(h),t.appendChild(s)}));var c,l=function(e,t,r){_toConsumableArray(o).forEach((function(e){e.style.width=i-t+"px"})),"up"===e?(n.style.left=t+"px",t+=r):"down"===e&&(n.style.left=t+"px",t-=r)},d=function(e,t){var r,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:50,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;if(null!==s)r=s;else{var i=t.getBoundingClientRect();r=e.pageX-i.x}var c=r,u=n.style.left.replace("px",""),d=c>u?"up":"down",m=setTimeout((function e(){l(d,r,a);var t=r;t===c?(clearTimeout(m),v.current=t,h.current=t):m=setTimeout(e,o)}),o)},m=function(e,t,r){var n,a=[];r.reduce((function(e,r){var n=r-t;return a.push({value:n,absValue:Math.abs(n),point:r}),r}),r[0]),[].concat(a).forEach((function(e){(void 0===n||e.absValue<n.absValue)&&(n=e)})),setTimeout((function(){return d(null,null,1,400,n.point)}),200)},f=function(e,t){return _toConsumableArray(e).map((function(e){return u(e,t)}))},p=function(e){var t,r=_createForOfIteratorHelper(e);try{for(r.s();!(t=r.n()).done;){var n=t.value;void 0===n[1].isUsed&&e.delete(n[0])}}catch(e){r.e(e)}finally{r.f()}return e},v=function e(n){var o=function(e){d(e,a)};r.addEventListener("mouseout",(function(e){setTimeout((function(){e.target===r&&a.removeEventListener("mousemove",o)}))})),a.addEventListener("mousemove",o),a.addEventListener("mouseup",(function r(n){a.removeEventListener("mousemove",o),setTimeout((function(){a.removeEventListener("mouseup",r),m(0,e.current,f(p(t).keys(),i))}))}))},h=function(e){var t=e.changedTouches[0].pageX+r.scrollLeft;d(null,null,1,50,t)};n.addEventListener("mousedown",v),r.addEventListener("touchmove",h),r.addEventListener("touchstart",h),r.addEventListener("touchend",(function(e){m(0,h.current,f(p(t).keys(),i))})),c=u(s,i),n.style.setProperty("left",c+"px"),_toConsumableArray(o).forEach((function(e){return e.style.setProperty("width",c+"px")}))}(),r=document.querySelector(".menu-hamburger"),n=r.firstElementChild,a=n.nextElementSibling,o=document.querySelector(".menu__list"),s=document.querySelectorAll(".menu__item"),i=o.querySelectorAll(".menu__link"),c=function(){r.classList.add("x"),n.classList.add("collapse"),a.classList.add("collapse"),setTimeout((function(){n.classList.add("rotate"),a.classList.add("rotate"),n.classList.remove("collapse"),a.classList.remove("collapse")}),200),setTimeout((function(){return o.classList.add("menu__list--visible")}),200)},l=function(){r.classList.remove("x"),n.classList.add("collapse"),a.classList.add("collapse"),n.classList.remove("rotate"),a.classList.remove("rotate"),setTimeout((function(){n.classList.remove("collapse"),a.classList.remove("collapse")}),200),setTimeout((function(){return o.classList.remove("menu__list--visible")}),200)},r.addEventListener("click",(function(e){return o.classList.contains("menu__list--visible")?l():c()})),Array.from(i).forEach((function(e){e.addEventListener("click",(function(){s.forEach((function(e){return e.classList.remove("active")})),e.closest(".menu__item").classList.add("active"),l()}))}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
